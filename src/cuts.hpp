#ifndef CUTS_HPP
#define CUTS_HPP

#include "detectors.hpp"
#include "TMath.h"
#include "flags.hpp"//Should strive to remove this eventually 
#include "constants.hpp"
#include <cmath>

/*
This Cut Library contains the various cuts and cut parameters
used in this analysis to identify particles and events.
The class is designed to be fairly separate from the analysis itself
in order to be used more easily by future analyses.
The only other library needed to allow it to work properly is
- detectors.hpp
as this contains the necessary functions for the CC segments

Cut Parameters were found using the jupyter notebooks in the "pyfitting" directory
*/
//Range of W/Q2
static const float _WminAna_ = 1.4;//1.4;not sure why this was 1.2
static const float _WmaxAna_ = 2.125;//2.125;//not sure why this was 2.4
static const float _Q2minAna_ = 2.0;//0.8;//3.0;//2.0; Moved up to 3.0 in order to compare with simulation in that range
static const float _Q2maxAna_ = 5.0; 
//Cut Parameters
//Fiducial Cuts
//	Electron {2,6,2}->{run,Sector,top/bot}
static const float _c1e_[2][6] = {	{11.97787671,11.56496833,12.59458826,11.85731316,14.55594404,12.0814363},//e16
									{11.97787671,11.56496833,12.59458826,11.85731316,14.55594404,12.0814363}};//e1f //Arjun's old= 12.0;
static const float _c2e_[2][6] = {	{25.19762696,26.48151819,23.17365097,25.61777223,19.78190062,24.88474384},//e16
									{25.19762696,26.48151819,23.17365097,25.61777223,19.78190062,24.88474384}};//e1f //Arjun's old= 18.5;
static const float _c3e_[2][6][2] = {	{	{0.28248061, 0.27747855},{0.12233818, 0.14860255},{0.25281043, 0.26060229},{0.27366261, 0.3170024 },{0.19024045, 0.21510195},{0.19730371, 0.21775186}},//e16
								   		{	{0.28248061, 0.27747855},{0.12233818, 0.14860255},{0.25281043, 0.26060229},{0.27366261, 0.3170024 },{0.19024045, 0.21510195},{0.19730371, 0.21775186}}};//e1f//Arjun's old= 0.25;
static const float _c4e_[2][6][2] = {	{	{29.41075565, 29.39750867},{24.65963298, 24.95915791},{29.60302015, 27.9154871 },{28.37899145, 29.47359733},{27.7584276,  28.24747819},{28.32724632, 28.22076669}},//e16
								   		{	{29.41075565, 29.39750867},{24.65963298, 24.95915791},{29.60302015, 27.9154871 },{28.37899145, 29.47359733},{27.7584276,  28.24747819},{28.32724632, 28.22076669}}};//e1f//Arjun's old= 15.0;//24.3;//15.0; //Replaced with arbitrary number to open the fiducial cut a bit
static const float _factor_e_[2][6][2] = {	{	{0.26899403, 0.2907199 },{1.29907506, 0.90203613},{0.39331917, 0.36519506},{0.26936768, 0.25042373},{0.57707275, 0.56154255},{0.75459157, 0.5812086 }},//e16
									 		{	{0.26899403, 0.2907199 },{1.29907506, 0.90203613},{0.39331917, 0.36519506},{0.26936768, 0.25042373},{0.57707275, 0.56154255},{0.75459157, 0.5812086 }}}; //e1f//Arjn's old= 0.416667;
static const float _p_shift_e_[2][6] = {	{0.35904026,0.35843091,0.26237208,0.3562745,0.22672063,0.34307112},//e16
									  		{0.35904026,0.35843091,0.26237208,0.3562745,0.22672063,0.34307112}};//e1f  //Arjun's old= 0.14;
//	Proton/Pip 6->sector {x,m}->{top,bot} {2,2,6} -> {e16/e1f,pro/pip,sector}
static const float _a0xh_[2][2][6] = {{{24.0,24.0,23.0,23.5,24.5,24.5},{24.0,24.0,23.0,23.5,24.5,24.5}},{{24.0,24.0,23.0,23.5,24.5,24.5},{24.0,24.0,23.0,23.5,24.5,24.5}}};
static const float _a0mh_[2][2][6] = {{{25.0,26.0,26.0,25.5,27.0,26.0},{25.0,26.0,26.0,25.5,27.0,26.0}},{{25.0,26.0,26.0,25.5,27.0,26.0},{25.0,26.0,26.0,25.5,27.0,26.0}}};
static const float _a1xh_[2][2][6] = {{{0.22,0.23,0.20,0.20,0.22,0.22},{0.22,0.23,0.20,0.20,0.22,0.22}},{{0.22,0.23,0.20,0.20,0.22,0.22},{0.22,0.23,0.20,0.20,0.22,0.22}}};
static const float _a1mh_[2][2][6] = {{{0.22,0.22,0.22,0.22,0.16,0.16},{0.22,0.22,0.22,0.22,0.16,0.16}},{{0.22,0.22,0.22,0.22,0.16,0.16},{0.22,0.22,0.22,0.22,0.16,0.16}}};
static const float _a2xh_[2][2][6] = {{{8.0,8.0,8.0,8.0,8.0,8.0},{8.0,8.0,8.0,8.0,8.0,8.0}},{{8.0,8.0,8.0,8.0,8.0,8.0},{8.0,8.0,8.0,8.0,8.0,8.0}}};
static const float _a2mh_[2][2][6] = {{{8.0,8.0,8.0,8.0,8.0,8.0},{8.0,8.0,8.0,8.0,8.0,8.0}},{{8.0,8.0,8.0,8.0,8.0,8.0},{8.0,8.0,8.0,8.0,8.0,8.0}}};
static const float _a3xh_[2][2][6] = {{{1.0,1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0,1.0}},{{1.0,1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0,1.0}}};
static const float _a3mh_[2][2][6] = {{{1.0,1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0,1.0}},{{1.0,1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0,1.0}}};
//	Pim {2,6(,2)}->{e16/e1f,sector(,top/bot)} 
static const float _c1h_[2][6] = {	{ 8.372200562728851 , 8.377905609039699 , 8.31567134116166 , 8.367729269437316 , 7.907960478941729 , 8.446507909750217 },
									{ 8.372200562728851 , 8.377905609039699 , 8.31567134116166 , 8.367729269437316 , 7.907960478941729 , 8.446507909750217 }};
static const float _c2h_[2][6] = {	{ 35.21052873635025 , 34.92738135028465 , 34.408915455128096 , 35.25270396292205 , 32.497410411952266 , 35.70869984888126 },
									{ 35.21052873635025 , 34.92738135028465 , 34.408915455128096 , 35.25270396292205 , 32.497410411952266 , 35.70869984888126 }};
static const float _c3h_[2][6][2] = {	{{ 0.08107971363189846 , 0.09886713039552085 },{ 0.08310340247573438 , 0.09919732765310348 },{ 0.08482776390499668 , 0.1133266654687173 },{ 0.09815595839490432 , 0.11319116739606791 },{ 0.0834651395367764 , 0.09908158229415652 },{ 0.09469061473347777 , 0.11728491395890904 }},
										{{ 0.08107971363189846 , 0.09886713039552085 },{ 0.08310340247573438 , 0.09919732765310348 },{ 0.08482776390499668 , 0.1133266654687173 },{ 0.09815595839490432 , 0.11319116739606791 },{ 0.0834651395367764 , 0.09908158229415652 },{ 0.09469061473347777 , 0.11728491395890904 }}};
static const float _c4h_[2][6][2] = {	{{ 25.891122924578465 , 26.28057273865801 },{ 25.635669540459048 , 25.7585380094352 },{ 25.660564297390692 , 27.540426442205572 },{ 25.99807529556492 , 26.805966227149124 },{ 26.624649944348366 , 26.916965990270572 },{ 26.9356030111899 , 27.43544868912645 }},
										{{ 25.891122924578465 , 26.28057273865801 },{ 25.635669540459048 , 25.7585380094352 },{ 25.660564297390692 , 27.540426442205572 },{ 25.99807529556492 , 26.805966227149124 },{ 26.624649944348366 , 26.916965990270572 },{ 26.9356030111899 , 27.43544868912645 }}};
static const float _p_shift_h_[2][6] = {{ 0.5398606598619471 , 0.5295521158353234 , 0.4927469340139821 , 0.5447910022490234 , 0.3473574054098622 , 0.5902846030356489 },
										{ 0.5398606598619471 , 0.5295521158353234 , 0.4927469340139821 , 0.5447910022490234 , 0.3473574054098622 , 0.5902846030356489 }};
static const float _factor_h_[2][6][2] = {	{{ 1.5234068670157588 , 0.8113394700773167 },{ 1.4916361520063175 , 0.6528952458231345 },{ 1.131810301777772 , 0.5577031384035638 },{ 1.4452020180941192 , 0.5054783643862927 },{ 1.450744504301845 , 0.908789213949683 },{ 0.8386415621151634 , 0.46998342406597154 }},
											{{ 1.5234068670157588 , 0.8113394700773167 },{ 1.4916361520063175 , 0.6528952458231345 },{ 1.131810301777772 , 0.5577031384035638 },{ 1.4452020180941192 , 0.5054783643862927 },{ 1.450744504301845 , 0.908789213949683 },{ 0.8386415621151634 , 0.46998342406597154 }}};

//Delta T
//	Proton
//Arjun's cut parameters: 3rd order polynomial
//{2,2,4}->{run,exp/sim,parameter}
static const float _dt_pro_low_[2][2][4] = 	{	{	{-0.778903, 0.027350, 0.047947, -0.009641},
									  				{-0.778903, 0.027350, 0.047947, -0.009641}},
									 			{	{-0.778903, 0.027350, 0.047947, -0.009641},
									  				{-0.778903, 0.027350, 0.047947, -0.009641}}};
static const float _dt_pro_top_[2][2][4] = 	{	{	{0.758057, -0.147383, 0.034343, -0.002367},
									  				{0.758057, -0.147383, 0.034343, -0.002367}},
									 			{	{0.758057, -0.147383, 0.034343, -0.002367},
									  				{0.758057, -0.147383, 0.034343, -0.002367}}};
//	Pip
//Arjun's cut parameters: 3rd order polynomial
//{2,2,4}->{run,exp/sim,parameter}
static const float _dt_pip_low_[2][2][4] = {	{	{-0.778903, 0.027350, 0.047947, -0.009641},
													{-0.778903, 0.027350, 0.047947, -0.009641}},
												{	{-0.778903, 0.027350, 0.047947, -0.009641},
													{-0.778903, 0.027350, 0.047947, -0.009641}}};
static const float _dt_pip_top_[2][2][4] = {	{	{0.758057, -0.147383, 0.034343, -0.002367},
													{0.758057, -0.147383, 0.034343, -0.002367}},
												{	{0.758057, -0.147383, 0.034343, -0.002367},
													{0.758057, -0.147383, 0.034343, -0.002367}}};
//	Pim
static const float _dt_pim_low_[2][2][4] = {{	{-0.778903, 0.027350, 0.047947, -0.009641},
												{-0.778903, 0.027350, 0.047947, -0.009641}},
											{	{-0.778903, 0.027350, 0.047947, -0.009641},
												{-0.778903, 0.027350, 0.047947, -0.009641}}};
static const float _dt_pim_top_[2][2][4] = {{	{0.758057, -0.147383, 0.034343, -0.002367},
												{0.758057, -0.147383, 0.034343, -0.002367}},
											{	{0.758057, -0.147383, 0.034343, -0.002367},
												{0.758057, -0.147383, 0.034343, -0.002367}}};
//Sampling Fraction {2,2,6,4}->{Run,exp/sim,Sector,Parameter}
static const float _sf_top_e16_[2][2][6][4] = {{{	{ 0.4109721677012818 , -0.059304796035891505 , 0.01948155531019868 , -0.0020736161073958777 },
													{ 0.4225545680872085 , -0.023545338321243756 , 0.004303189163395074 , -0.00025863973498588917 },
													{ 0.41075585260954817 , -0.04564447417251288 , 0.01703897193869527 , -0.0021102763422830868 },
													{ 0.406196316942181 , -0.04262727670924192 , 0.012981240730992955 , -0.0015261139021859797 },
													{ 0.4361127553922672 , -0.07466791001154878 , 0.027999104984205138 , -0.0032389182474032415 },
													{ 0.4029987204406168 , -0.024814435200038808 , 0.009750288763277045 , -0.0012682058689456638 }},
												{	{ 0.4109721677012818 , -0.059304796035891505 , 0.01948155531019868 , -0.0020736161073958777 },
													{ 0.4225545680872085 , -0.023545338321243756 , 0.004303189163395074 , -0.00025863973498588917 },
													{ 0.41075585260954817 , -0.04564447417251288 , 0.01703897193869527 , -0.0021102763422830868 },
													{ 0.406196316942181 , -0.04262727670924192 , 0.012981240730992955 , -0.0015261139021859797 },
													{ 0.4361127553922672 , -0.07466791001154878 , 0.027999104984205138 , -0.0032389182474032415 },
													{ 0.4029987204406168 , -0.024814435200038808 , 0.009750288763277045 , -0.0012682058689456638 }}},
												{{	{ 0.4109721677012818 , -0.059304796035891505 , 0.01948155531019868 , -0.0020736161073958777 },
													{ 0.4225545680872085 , -0.023545338321243756 , 0.004303189163395074 , -0.00025863973498588917 },
													{ 0.41075585260954817 , -0.04564447417251288 , 0.01703897193869527 , -0.0021102763422830868 },
													{ 0.406196316942181 , -0.04262727670924192 , 0.012981240730992955 , -0.0015261139021859797 },
													{ 0.4361127553922672 , -0.07466791001154878 , 0.027999104984205138 , -0.0032389182474032415 },
													{ 0.4029987204406168 , -0.024814435200038808 , 0.009750288763277045 , -0.0012682058689456638 }},
												{	{ 0.4109721677012818 , -0.059304796035891505 , 0.01948155531019868 , -0.0020736161073958777 },
													{ 0.4225545680872085 , -0.023545338321243756 , 0.004303189163395074 , -0.00025863973498588917 },
													{ 0.41075585260954817 , -0.04564447417251288 , 0.01703897193869527 , -0.0021102763422830868 },
													{ 0.406196316942181 , -0.04262727670924192 , 0.012981240730992955 , -0.0015261139021859797 },
													{ 0.4361127553922672 , -0.07466791001154878 , 0.027999104984205138 , -0.0032389182474032415 },
													{ 0.4029987204406168 , -0.024814435200038808 , 0.009750288763277045 , -0.0012682058689456638 }}}};
static const float _sf_low_e16_[2][2][6][4] = {{{ 
							{ 0.07468933888250001 , 0.14385422353275323 , -0.04406981505931146 , 0.004719094797266632 },
							{ 0.0702093245751536 , 0.14183442285308642 , -0.0401350039607594 , 0.00425635540112592 },
							{ 0.07911689618273751 , 0.1513466845105136 , -0.045014270988394056 , 0.004788370032143993 },
							{ 0.0897306121571821 , 0.13594182673572958 , -0.04235160682521199 , 0.004653773813097611 },
							{ 0.03426617573234634 , 0.19382197960460704 , -0.06752231088006377 , 0.007891711760907544 },
							{ 0.07487620217934582 , 0.1458239351595044 , -0.042002625889969766 , 0.004246416014887425 }
							},{ 
							{ 0.07468933888250001 , 0.14385422353275323 , -0.04406981505931146 , 0.004719094797266632 },
							{ 0.0702093245751536 , 0.14183442285308642 , -0.0401350039607594 , 0.00425635540112592 },
							{ 0.07911689618273751 , 0.1513466845105136 , -0.045014270988394056 , 0.004788370032143993 },
							{ 0.0897306121571821 , 0.13594182673572958 , -0.04235160682521199 , 0.004653773813097611 },
							{ 0.03426617573234634 , 0.19382197960460704 , -0.06752231088006377 , 0.007891711760907544 },
							{ 0.07487620217934582 , 0.1458239351595044 , -0.042002625889969766 , 0.004246416014887425 }
							}},{{ 
							{ 0.07468933888250001 , 0.14385422353275323 , -0.04406981505931146 , 0.004719094797266632 },
							{ 0.0702093245751536 , 0.14183442285308642 , -0.0401350039607594 , 0.00425635540112592 },
							{ 0.07911689618273751 , 0.1513466845105136 , -0.045014270988394056 , 0.004788370032143993 },
							{ 0.0897306121571821 , 0.13594182673572958 , -0.04235160682521199 , 0.004653773813097611 },
							{ 0.03426617573234634 , 0.19382197960460704 , -0.06752231088006377 , 0.007891711760907544 },
							{ 0.07487620217934582 , 0.1458239351595044 , -0.042002625889969766 , 0.004246416014887425 }
							},{ 
							{ 0.07468933888250001 , 0.14385422353275323 , -0.04406981505931146 , 0.004719094797266632 },
							{ 0.0702093245751536 , 0.14183442285308642 , -0.0401350039607594 , 0.00425635540112592 },
							{ 0.07911689618273751 , 0.1513466845105136 , -0.045014270988394056 , 0.004788370032143993 },
							{ 0.0897306121571821 , 0.13594182673572958 , -0.04235160682521199 , 0.004653773813097611 },
							{ 0.03426617573234634 , 0.19382197960460704 , -0.06752231088006377 , 0.007891711760907544 },
							{ 0.07487620217934582 , 0.1458239351595044 , -0.042002625889969766 , 0.004246416014887425 }
							}}};
//Min CC  {2,6,3,18}->{run group,Sector, Side, Segment}  run group={0,1}->{e16,e1f}  //e1f not done yet
static const double _cc_min_[2][6][3][18] = {{{		{20.4, 28.5, 20.0, 18.4, 20.0, 19.6, 20.4, 24.8, 24.8, 22.4, 26.1, 23.6, 22.8, 26.1, 24.4, 26.1, 22.8, 23.6},
													{24.0, 26.5, 20.0, 16.4, 22.0, 22.0, 26.1, 25.3, 24.4, 33.7, 23.6, 27.3, 25.3, 23.6, 30.1, 21.2, 21.2, 24.8},
													{37.7, 30.1, 0.0, 0.0, 0.0, 0.0, 0.0, 27.3, 24.8, 0.0, 0.0, 25.7, 23.6, 27.3, 29.7, 27.7, 31.3, 33.7}
												},
												{	{32.1, 28.5, 30.1, 18.8, 15.6, 25.7, 22.8, 21.2, 30.5, 30.1, 20.8, 20.4, 24.0, 31.7, 24.8, 25.3, 26.1, 29.7},
													{28.1, 26.1, 27.3, 14.4, 15.2, 16.8, 20.0, 20.0, 22.0, 22.8, 20.8, 23.6, 25.7, 24.8, 23.6, 26.9, 24.8, 32.9},
													{51.3, 41.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 25.3, 21.6, 0.0, 29.7, 24.4, 32.1, 34.5, 35.3, 36.1, 40.5}
												},
												{	{28.1, 21.2, 24.8, 24.8, 26.9, 20.0, 22.0, 23.6, 22.0, 25.3, 24.0, 26.5, 24.4, 26.9, 30.1, 25.7, 28.1, 24.4},
													{26.5, 28.9, 22.8, 21.6, 24.0, 20.8, 19.2, 23.2, 29.3, 26.5, 26.5, 26.5, 26.5, 27.3, 29.3, 35.7, 24.8, 28.5},
													{47.3, 34.1, 25.3, 0.0, 26.1, 20.8, 0.0, 24.0, 24.4, 26.1, 0.0, 29.7, 0.0, 26.9, 28.5, 34.9, 37.3, 41.7}
												},
												{	{27.3, 24.8, 20.4, 22.8, 24.0, 20.4, 23.6, 26.1, 20.8, 20.8, 20.4, 22.0, 18.8, 20.4, 24.4, 19.6, 21.2, 26.1},
													{25.7, 20.0, 26.5, 16.4, 17.6, 12.8, 23.2, 22.8, 20.8, 20.4, 21.2, 24.4, 19.2, 20.4, 27.3, 28.1, 24.8, 28.5},
													{34.1, 28.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 67.7, 48.5, 0.0, 0.0, 21.6, 23.6, 25.3, 28.9, 33.7}
												},
												{	{26.1, 32.1, 26.9, 26.1, 23.2, 0.0, 0.0, 28.9, 28.1, 27.7, 28.5, 33.7, 32.5, 21.2, 30.9, 40.9, 28.9, 25.7},
													{25.7, 25.3, 31.3, 34.1, 25.7, 28.5, 0.0, 19.2, 19.2, 21.2, 31.3, 25.7, 0.0, 21.2, 29.3, 40.9, 27.7, 28.9},
													{41.3, 43.7, 0.0, 31.3, 0.0, 0.0, 31.7, 26.5, 27.3, 30.5, 30.5, 43.3, 38.5, 28.1, 36.1, 38.1, 34.9, 32.5}
												},
												{	{28.5, 24.8, 28.9, 19.6, 20.0, 0.0, 26.5, 22.8, 24.4, 30.1, 40.9, 28.5, 24.8, 34.1, 0.0, 36.5, 33.7, 22.4},
													{28.9, 32.1, 29.3, 24.8, 19.2, 17.6, 0.0, 27.3, 22.8, 34.9, 22.8, 29.3, 25.7, 21.6, 30.1, 34.1, 27.3, 24.4},
													{42.9, 38.9, 28.1, 0.0, 0.0, 0.0, 25.7, 24.0, 25.3, 28.9, 27.3, 30.1, 28.9, 36.1, 44.1, 41.7, 36.5, 33.3}
												}},
												{{	{20.4, 28.5, 20.0, 18.4, 20.0, 19.6, 20.4, 24.8, 24.8, 22.4, 26.1, 23.6, 22.8, 26.1, 24.4, 26.1, 22.8, 23.6},
													{24.0, 26.5, 20.0, 16.4, 22.0, 22.0, 26.1, 25.3, 24.4, 33.7, 23.6, 27.3, 25.3, 23.6, 30.1, 21.2, 21.2, 24.8},
													{37.7, 30.1, 0.0, 0.0, 0.0, 0.0, 0.0, 27.3, 24.8, 0.0, 0.0, 25.7, 23.6, 27.3, 29.7, 27.7, 31.3, 33.7}
												},
												{	{32.1, 28.5, 30.1, 18.8, 15.6, 25.7, 22.8, 21.2, 30.5, 30.1, 20.8, 20.4, 24.0, 31.7, 24.8, 25.3, 26.1, 29.7},
													{28.1, 26.1, 27.3, 14.4, 15.2, 16.8, 20.0, 20.0, 22.0, 22.8, 20.8, 23.6, 25.7, 24.8, 23.6, 26.9, 24.8, 32.9},
													{51.3, 41.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 25.3, 21.6, 0.0, 29.7, 24.4, 32.1, 34.5, 35.3, 36.1, 40.5}
												},
												{	{28.1, 21.2, 24.8, 24.8, 26.9, 20.0, 22.0, 23.6, 22.0, 25.3, 24.0, 26.5, 24.4, 26.9, 30.1, 25.7, 28.1, 24.4},
													{26.5, 28.9, 22.8, 21.6, 24.0, 20.8, 19.2, 23.2, 29.3, 26.5, 26.5, 26.5, 26.5, 27.3, 29.3, 35.7, 24.8, 28.5},
													{47.3, 34.1, 25.3, 0.0, 26.1, 20.8, 0.0, 24.0, 24.4, 26.1, 0.0, 29.7, 0.0, 26.9, 28.5, 34.9, 37.3, 41.7}
												},
												{	{27.3, 24.8, 20.4, 22.8, 24.0, 20.4, 23.6, 26.1, 20.8, 20.8, 20.4, 22.0, 18.8, 20.4, 24.4, 19.6, 21.2, 26.1},
													{25.7, 20.0, 26.5, 16.4, 17.6, 12.8, 23.2, 22.8, 20.8, 20.4, 21.2, 24.4, 19.2, 20.4, 27.3, 28.1, 24.8, 28.5},
													{34.1, 28.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 67.7, 48.5, 0.0, 0.0, 21.6, 23.6, 25.3, 28.9, 33.7}
												},
												{	{26.1, 32.1, 26.9, 26.1, 23.2, 0.0, 0.0, 28.9, 28.1, 27.7, 28.5, 33.7, 32.5, 21.2, 30.9, 40.9, 28.9, 25.7},
													{25.7, 25.3, 31.3, 34.1, 25.7, 28.5, 0.0, 19.2, 19.2, 21.2, 31.3, 25.7, 0.0, 21.2, 29.3, 40.9, 27.7, 28.9},
													{41.3, 43.7, 0.0, 31.3, 0.0, 0.0, 31.7, 26.5, 27.3, 30.5, 30.5, 43.3, 38.5, 28.1, 36.1, 38.1, 34.9, 32.5}
												},
												{	{28.5, 24.8, 28.9, 19.6, 20.0, 0.0, 26.5, 22.8, 24.4, 30.1, 40.9, 28.5, 24.8, 34.1, 0.0, 36.5, 33.7, 22.4},
													{28.9, 32.1, 29.3, 24.8, 19.2, 17.6, 0.0, 27.3, 22.8, 34.9, 22.8, 29.3, 25.7, 21.6, 30.1, 34.1, 27.3, 24.4},
													{42.9, 38.9, 28.1, 0.0, 0.0, 0.0, 25.7, 24.0, 25.3, 28.9, 27.3, 30.1, 28.9, 36.1, 44.1, 41.7, 36.5, 33.3}
												}}};				
//Min EC
//{2,2,6}->{run,exp/sim,sector}
static float _p_min_[2][2][6]={{{0.70,0.70,0.70,0.70,0.70,0.70},{0.70,0.70,0.70,0.70,0.70,0.70}},
					{{0.64,0.64,0.64,0.64,0.64,0.64},{0.64,0.64,0.64,0.64,0.64,0.64}}};//GeV
static float _ec_min_cut_[2][2][6]={{{0.06,0.06,0.06,0.06,0.06,0.06},{0.06,0.06,0.06,0.06,0.06,0.06}},
					{{0.058,0.064,0.060,0.056,0.058,0.056},{0.063,0.063,0.063,0.063,0.063,0.063}}};//GeV
//Missing Mass
//{2,2,4,2}->{run,exp/sim,{p,pip,pim,zero},{bot,top}}
static float _mm_top_[2][2][4][4] = {	{	{	{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0}},
											{	{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0}}},
										{	{	{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0}},
											{	{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0}}}};
static float _mm_bot_[2][2][4][4] = {	{	{	{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0}},
											{	{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0}}},
										{	{	{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0}},
											{	{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0},{10.0,10.0,10.0,10.0}}}};
static float _mm_bounds_[2][2][4][2] = {	{	{	{0.904749,0.988945},{0.0820622,0.23254},{0.0781216,0.250616},{-0.06325,0.06325}},
												{	{0.904749,0.988945},{0.0820622,0.23254},{0.0781216,0.250616},{-0.06325,0.06325}}},
											{	{	{0.904749,0.988945},{0.0820622,0.23254},{0.0781216,0.250616},{-0.06325,0.06325}},
												{	{0.904749,0.988945},{0.0820622,0.23254},{0.0781216,0.250616},{-0.06325,0.06325}}}};//GeV
static float _mm2_bounds_[2][2][4][2] = {	{	{	{0.904749,0.988945},{0.0820622,0.23254},{0.0781216,0.250616},{-0.06325,0.06325}},
												{	{0.904749,0.988945},{0.0820622,0.23254},{0.0781216,0.250616},{-0.06325,0.06325}}},
											{	{	{0.904749,0.988945},{0.0820622,0.23254},{0.0781216,0.250616},{-0.06325,0.06325}},
												{	{0.904749,0.988945},{0.0820622,0.23254},{0.0781216,0.250616},{-0.06325,0.06325}}}};//GeV^2
//{exp/sim} {e16/e1f} {topology} {sector} {bot/top} {slope/intercept}
//exp Proton needs doing, exp pip and exp pim put in place, exp zero needs doing
/*
Fit: 
exp
	e16
		pip, pim, zero
	e1f
sim
	e16
	e1f
*/												
static float _mm2_par_[2][2][4][6][2][2] = {
	{//exp
		{//e16
			{	{	{ 0.005796388428388928 , 0.7863753388215604 },//MM_Proton
					{ -0.003128458338664042 , 0.9990786740352683 }},
				{	{ 0.002942936747026989 , 0.7865972827009886 },
					{ 0.009353404252890999 , 0.9623061477266913 }},
				{	{ 0.0634738798863578 , 0.6747993191991528 },
					{ -0.02829128458766934 , 1.0316628492820346 }},
				{	{ -0.052406442055031775 , 0.9020485786134486 },
					{ 0.010107072080628486 , 0.9732999515637378 }},
				{	{ 0.021290683292603786 , 0.759920916349297 },
					{ -0.03204228347219873 , 1.0569317927820965 }},
				{	{ 0.02623029898911681 , 0.7445793973267967 },
					{ -0.013686297044713714 , 1.0130829957310075 }}},
			{	{	{ -0.013748345863136502 , 0.026213313495839906 },//MM_pip
					{ 0.012350439959006537 , 0.02124674110052745 }},
				{	{ -0.02200036494981985 , 0.040188109953778355 },
					{ 0.022416333111576515 , -0.0009468539043650734 }},
				{	{ -0.018737553168715653 , 0.03353054812115341 },
					{ 0.020959691017694508 , 0.003423452857337626 }},
				{	{ -0.024348162730534105 , 0.0460805705108269 },
					{ 0.024378676756165726 , -0.0010379311549158722 }},
				{	{ -0.014621653920314797 , 0.026509724024191335 },
					{ 0.01812032284051347 , 0.012494948446609536 }},
				{	{ -0.008272290122803231 , 0.01636285761285789 },
					{ 0.01363189886815041 , 0.016795521413094212 }}},
			{	{	{ -0.014574672300178785 , 0.0231351992259951 },//MM_pim
					{ 0.012008034330944361 , 0.027681568136791332 }},
				{	{ -0.01691858443608553 , 0.026270934683806223 },
					{ 0.01657980304804514 , 0.013913609690438622 }},
				{	{ -0.018023567539148164 , 0.028618721247829867 },
					{ 0.02011466635947079 , 0.009303040242977834 }},
				{	{ -0.02229870654698315 , 0.035822587618665365 },
					{ 0.014875223555551617 , 0.0227309640033108 }},
				{	{ -0.026565331517920992 , 0.041777566038688464 },
					{ 0.02207818191061878 , 0.011648181294183574 }},
				{	{ -0.02633723937109683 , 0.04066722667763112 },
					{ 0.02500738184951723 , 0.0030474704730969458 }}},
			{	{	{ -0.0000984 , -0.0008992 },//MM_zero
					{ -0.0000196 , 0.0006886 }},
				{	{ -0.0000264 , -0.0009669 },
					{ 0.0001048 , 0.0003802 }},
				{	{ -0.0000874 , -0.0008607 },
					{ 0.0000483 , 0.0004750 }},
				{	{ -0.0002415 , -0.0006041 },
					{ 0.0000491 , 0.0005241 }},
				{	{ -0.0000437 , -0.0010429 },
					{ 0.0001507 , 0.0003705 }},
				{	{ 0.0000649 , -0.0011957 },
					{ -0.0000964 , 0.0007871 }}}
		},{//e1f
			{	{	{ 0.0 , 0.904749 },//MM_pro (not complete)
					{ 0.0 , 0.988945 }},
				{	{ 0.0 , 0.904749 },
					{ 0.0 , 0.988945 }},
				{	{ 0.0 , 0.904749 },
					{ 0.0 , 0.988945 }},
				{	{ 0.0 , 0.904749 },
					{ 0.0 , 0.988945 }},
				{	{ 0.0 , 0.904749 },
					{ 0.0 , 0.988945 }},
				{	{ 0.0 , 0.904749 },
					{ 0.0 , 0.988945 }}},
			{	{	{ -0.013748301660423746 , 0.02621321951125682 },//MM_pip (not complete)
					{ 0.012350395865794343 , 0.02124686045391978 }},
				{	{ 0.022416293333666803 , -0.0009467586117632862 },
					{ -0.022000342321450945 , 0.04018804335590836 }},
				{	{ 0.020959719386373175 , 0.0034234204538328076 },
					{ -0.018737560046380275 , 0.03353054400355789 }},
				{	{ 0.024378822748004847 , -0.0010381873340456628 },
					{ -0.024348418732647537 , 0.046081047367636345 }},
				{	{ 0.01919686585392957 , 0.010463335403144898 },
					{ -0.015783534899353826 , 0.028702399582552662 }},
				{	{ 0.013631976315522189 , 0.016795393488869853 },
					{ -0.008272341530228891 , 0.016362942192312133 }}},
			{	{	{ -0.014574672300178785 , 0.0231351992259951 },//MM_pim (not complete)
					{ 0.012008034330944361 , 0.027681568136791332 }},
				{	{ -0.01691858443608553 , 0.026270934683806223 },
					{ 0.01657980304804514 , 0.013913609690438622 }},
				{	{ -0.018023567539148164 , 0.028618721247829867 },
					{ 0.02011466635947079 , 0.009303040242977834 }},
				{	{ -0.02229870654698315 , 0.035822587618665365 },
					{ 0.014875223555551617 , 0.0227309640033108 }},
				{	{ -0.026565331517920992 , 0.041777566038688464 },
					{ 0.02207818191061878 , 0.011648181294183574 }},
				{	{ -0.02633723937109683 , 0.04066722667763112 },
					{ 0.02500738184951723 , 0.0030474704730969458 }}},
			{	{	{ -9.214046332062276e-05 , -0.0017073425880881313 },//MM_zero (not complete)
					{ -4.91554817955711e-05 , 0.0012478319567585739 }},
				{	{ -0.00011088947251339704 , -0.0016291469666663053 },
					{ 0.00012233620579889766 , 0.0008274981997237033 }},
				{	{ -0.00012815340842784386 , -0.0016211668446709348 },
					{ 8.294119132915139e-05 , 0.0008969266506796995 }},
				{	{ -0.00015076107474648457 , -0.0016086855860620462 },
					{ 9.679020082322807e-05 , 0.0009437895457452742 }},
				{	{ -0.0001257123911243612 , -0.0016763418305722941 },
					{ 0.00013190167599356256 , 0.0008748283326918376 }},
				{	{ 3.516142228371989e-05 , -0.001931122179049949 },
					{ -1.8201701926038883e-05 , 0.0011091763502784004 }}}
		}
	},{//sim
		{//e16
			{	{	{ 0.0 , 0.904749 },//MM_pro (not complete)
					{ 0.0 , 0.988945 }},
				{	{ 0.0 , 0.904749 },
					{ 0.0 , 0.988945 }},
				{	{ 0.0 , 0.904749 },
					{ 0.0 , 0.988945 }},
				{	{ 0.0 , 0.904749 },
					{ 0.0 , 0.988945 }},
				{	{ 0.0 , 0.904749 },
					{ 0.0 , 0.988945 }},
				{	{ 0.0 , 0.904749 },
					{ 0.0 , 0.988945 }}},
			{	{	{ -0.013748301660423746 , 0.02621321951125682 },//MM_pip (not complete)
					{ 0.012350395865794343 , 0.02124686045391978 }},
				{	{ 0.022416293333666803 , -0.0009467586117632862 },
					{ -0.022000342321450945 , 0.04018804335590836 }},
				{	{ 0.020959719386373175 , 0.0034234204538328076 },
					{ -0.018737560046380275 , 0.03353054400355789 }},
				{	{ 0.024378822748004847 , -0.0010381873340456628 },
					{ -0.024348418732647537 , 0.046081047367636345 }},
				{	{ 0.01919686585392957 , 0.010463335403144898 },
					{ -0.015783534899353826 , 0.028702399582552662 }},
				{	{ 0.013631976315522189 , 0.016795393488869853 },
					{ -0.008272341530228891 , 0.016362942192312133 }}},
			{	{	{ -0.014574672300178785 , 0.0231351992259951 },//MM_pim (not complete)
					{ 0.012008034330944361 , 0.027681568136791332 }},
				{	{ -0.01691858443608553 , 0.026270934683806223 },
					{ 0.01657980304804514 , 0.013913609690438622 }},
				{	{ -0.018023567539148164 , 0.028618721247829867 },
					{ 0.02011466635947079 , 0.009303040242977834 }},
				{	{ -0.02229870654698315 , 0.035822587618665365 },
					{ 0.014875223555551617 , 0.0227309640033108 }},
				{	{ -0.026565331517920992 , 0.041777566038688464 },
					{ 0.02207818191061878 , 0.011648181294183574 }},
				{	{ -0.02633723937109683 , 0.04066722667763112 },
					{ 0.02500738184951723 , 0.0030474704730969458 }}},
			{	{	{ -9.214046332062276e-05 , -0.0017073425880881313 },//MM_zero (not complete)
					{ -4.91554817955711e-05 , 0.0012478319567585739 }},
				{	{ -0.00011088947251339704 , -0.0016291469666663053 },
					{ 0.00012233620579889766 , 0.0008274981997237033 }},
				{	{ -0.00012815340842784386 , -0.0016211668446709348 },
					{ 8.294119132915139e-05 , 0.0008969266506796995 }},
				{	{ -0.00015076107474648457 , -0.0016086855860620462 },
					{ 9.679020082322807e-05 , 0.0009437895457452742 }},
				{	{ -0.0001257123911243612 , -0.0016763418305722941 },
					{ 0.00013190167599356256 , 0.0008748283326918376 }},
				{	{ 3.516142228371989e-05 , -0.001931122179049949 },
					{ -1.8201701926038883e-05 , 0.0011091763502784004 }}}
		},{//e1f
			{	{	{ 0.0 , 0.904749 },//MM_pro (not complete)
					{ 0.0 , 0.988945 }},
				{	{ 0.0 , 0.904749 },
					{ 0.0 , 0.988945 }},
				{	{ 0.0 , 0.904749 },
					{ 0.0 , 0.988945 }},
				{	{ 0.0 , 0.904749 },
					{ 0.0 , 0.988945 }},
				{	{ 0.0 , 0.904749 },
					{ 0.0 , 0.988945 }},
				{	{ 0.0 , 0.904749 },
					{ 0.0 , 0.988945 }}},
			{	{	{ -0.013748301660423746 , 0.02621321951125682 },//MM_pip (not complete)
					{ 0.012350395865794343 , 0.02124686045391978 }},
				{	{ 0.022416293333666803 , -0.0009467586117632862 },
					{ -0.022000342321450945 , 0.04018804335590836 }},
				{	{ 0.020959719386373175 , 0.0034234204538328076 },
					{ -0.018737560046380275 , 0.03353054400355789 }},
				{	{ 0.024378822748004847 , -0.0010381873340456628 },
					{ -0.024348418732647537 , 0.046081047367636345 }},
				{	{ 0.01919686585392957 , 0.010463335403144898 },
					{ -0.015783534899353826 , 0.028702399582552662 }},
				{	{ 0.013631976315522189 , 0.016795393488869853 },
					{ -0.008272341530228891 , 0.016362942192312133 }}},
			{	{	{ -0.014574672300178785 , 0.0231351992259951 },//MM_pim (not complete)
					{ 0.012008034330944361 , 0.027681568136791332 }},
				{	{ -0.01691858443608553 , 0.026270934683806223 },
					{ 0.01657980304804514 , 0.013913609690438622 }},
				{	{ -0.018023567539148164 , 0.028618721247829867 },
					{ 0.02011466635947079 , 0.009303040242977834 }},
				{	{ -0.02229870654698315 , 0.035822587618665365 },
					{ 0.014875223555551617 , 0.0227309640033108 }},
				{	{ -0.026565331517920992 , 0.041777566038688464 },
					{ 0.02207818191061878 , 0.011648181294183574 }},
				{	{ -0.02633723937109683 , 0.04066722667763112 },
					{ 0.02500738184951723 , 0.0030474704730969458 }}},
			{	{	{ -9.214046332062276e-05 , -0.0017073425880881313 },//MM_zero (not complete)
					{ -4.91554817955711e-05 , 0.0012478319567585739 }},
				{	{ -0.00011088947251339704 , -0.0016291469666663053 },
					{ 0.00012233620579889766 , 0.0008274981997237033 }},
				{	{ -0.00012815340842784386 , -0.0016211668446709348 },
					{ 8.294119132915139e-05 , 0.0008969266506796995 }},
				{	{ -0.00015076107474648457 , -0.0016086855860620462 },
					{ 9.679020082322807e-05 , 0.0009437895457452742 }},
				{	{ -0.0001257123911243612 , -0.0016763418305722941 },
					{ 0.00013190167599356256 , 0.0008748283326918376 }},
				{	{ 3.516142228371989e-05 , -0.001931122179049949 },
					{ -1.8201701926038883e-05 , 0.0011091763502784004 }}}
		}
	}
	};


//Efficiency Cuts
//	CC
//Kinematic Cuts
//	Margin of allowed Error
static const float _px_dev_ = 0.02;//Placeholder
static const float _py_dev_ = 0.02;//Placeholder
static const float _pz_dev_ = 0.02;//Placeholder
//Vertex Cuts
static const float _vz_top_[2] = {-0.75,0.1};//{e16,e1f}
static const float _vz_bot_[2] = {-8.0,-20.0};//{e16,e1f}


//Cut Names


namespace cuts{
	//Fiducial 
	float fid_e_theta_cut(int run_, int sector_, float p_);
	float fid_e_expon_pos(int run_, int sector_, float p_);
	float fid_e_expon_neg(int run_, int sector_, float p_);
	float fid_e_del_phi_pos(int run_, int sector_, float p_, float theta_);
	float fid_e_del_phi_neg(int run_, int sector_, float p_, float theta_);
	bool fid_e (float p_, float theta_, float phi_, std::shared_ptr<Flags> flags_);
	float phi_min(int hadron_, float theta_, int run_, int sector_);
	float phi_max(int hadron_, float theta_, int run_, int sector_);
	bool fid_h (int hadron_, float theta_, float phi_, std::shared_ptr<Flags> flags_);
	float fid_h_theta_cut(int run_, int sector_, float p_);
	float fid_h_expon_pos(int run_, int sector_, float p_);
	float fid_h_expon_neg(int run_, int sector_, float p_);
	float fid_h_del_phi_pos(int run_, int sector_, float p_, float theta_);
	float fid_h_del_phi_neg(int run_, int sector_, float p_, float theta_);
	bool fid_pim(float p_, float theta_, float phi_, std::shared_ptr<Flags> flags_);
	bool fid_cut(int part_, float p_, float theta_, float phi_, std::shared_ptr<Flags> flags_);
	//Delta t
	float delta_low(int part_, int run_, bool sim_, float p_);
	float delta_high(int part_, int run_, bool sim_, float p_);
	bool delta_t_cut(int species_, float p_, float dt_, std::shared_ptr<Flags> flags_);
	//Min CC
	bool min_cc(int cc_segm_, int cc_sect_, int nphe_, std::shared_ptr<Flags> flags_);
	//Min EC
	bool min_ec(Float_t etot_, int sector_, std::shared_ptr<Flags> flags_);
	//SF
	float sf_low(int run_, int sim_, Float_t p_, int sector_);
	float sf_top(int run_, int sim_, Float_t p_, int sector_);
	bool sf_cut(float p_, float sf_, float phi_, std::shared_ptr<Flags> flags_);
	//Missing Mass
	//Not utilized yet, but will be in time 
	float mm_top(int run_, int sim_, int top_, int sector_, float W_);
	//Not utilized yet, but will be in time 
	float mm_bot(int run_, int sim_, int top_, int sector_, float W_);
	//Will need some modification to have W dependence, but this will work for now
	bool MM_cut(int top_, float mm_, int sector_, float W_, std::shared_ptr<Flags> flags_);
	//bool MM_cut(int top_, float mm_, float W_, std::shared_ptr<Flags> flags_);
	//Putting together the e_sanity cuts based on environment we set
	//In Analysis W Q2 regiem
	bool in_range(float W_, float Q2_);
	bool in_range(float W_);
	//Sanity Cuts
	bool e_sanity(int dc_, int sc_, int ec_, int cc_, int stat_);
	bool pro_sanity(int dc_, int sc_, int stat_);
	bool pip_sanity(int dc_, int sc_, int stat_);
	bool pim_sanity(int dc_, int sc_, int stat_);
	bool h_sanity(char* species_, int q_, int dc_, int sc_, int stat_);
	//Vertex Cut
	bool vertex_cut(float vz_, int run_);
	//Efficiency Cuts
	//These all need to be built up 1/18/23
	bool sc_eff_ele_cut(float p_, float theta_, int run_);
	bool sc_eff_pro_cut(float p_, float theta_, int run_);
	bool sc_eff_pip_cut(float p_, float theta_, int run_);
	bool sc_eff_pim_cut(float p_, float theta_, int run_);
	bool sc_eff_cut(float p_, float theta_, int run_, int par_);


};


#endif